#!/usr/bin/env perl

use strict;
use warnings;

use File::Temp;
use Getopt::Long;
use YAML::Syck;
use Digest::MD5;

my($project, $component) = ("","");
my $type = "Bug";
GetOptions(
    'project=s' => \$project,
    'component=s' => \$component,
    'type=s' => \$type,
);

my ($fh, $fn) = File::Temp::tempfile("jiraXXXXXX",
  SUFFIX => ".yml",
  TMPDIR => 1,
  CLEANUP => 1, # TODO make this a config option for debugging
);

print $fh <<EOM;
summary:
--- | # description on next line

---
project: $project
component: $component
issuetype: $type
assignee: $ENV{USER}
reporter: $ENV{USER}
EOM

close $fh;

my $jira = parse_jira(user_edit_file($fn));

use Data::Dumper;
print Dumper $jira;

# give content that represents a jira in YAML format, convert it to a hash ref
# and return it.  If there multiple YAML documents are present, merge them
#
# the last YAML document that is a scalar is put into a key named description
# unless a key of that name is explicitly present
sub parse_jira {
  my $content = shift;

  my @yamls = eval {
    YAML::Syck::Load($content);
  };
  if ($@) {
    die "Invalid jira specification (not valid yaml): $@\n";
  }

  my %jira = ();
  foreach my $yaml (@yamls) {
    if (ref($yaml) eq "HASH") {
      @jira{ keys %$yaml } = values %$yaml;
    } elsif (!ref($yaml)) {
      $jira{"description"} = $yaml;
    }
  }

  return \%jira;
}

# dies if the user makes no changes to the file or the editor returns non-zero
# returns the contents of the file that user created
sub user_edit_file {
  my $file = shift;

  my $digest_before = Digest::MD5::md5_hex(slurp($file));

  my $editor = $ENV{EDITOR} || "vi";
  my $ret = system($editor, $file);
  if ($ret != 0) {
    die "Aborting: $editor $file returned $ret\n";
  }

  my $contents = slurp($file);
  if (Digest::MD5::md5_hex($contents) eq $digest_before) {
    die "Aborting: unchanged file\n";
  }

  return $contents;
}

sub slurp {
  my $file = shift;
  local $/ = undef;
  open my $fh, $file or die "Couldn't open $file: $!";
  return <$fh>
}
